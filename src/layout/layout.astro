---
const { bodyStyle, title = "Homepage" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="We make plumbing simple. Call us, schedule your free inspection, and let us do the rest! Local plumbing specialists available. Call (888) 531-2365."
    />
    <title>Plumbers Near You | Call For a Free Estimate | House-Plumbing</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/animate.css" />
    <link rel="stylesheet" href="/css/slick.css" />
    <link rel="shortcut icon" href="/images/fav.png" type="image/x-icon" />
    <link
      rel="stylesheet"
      href="https://cdn.rawgit.com/michalsnik/aos/2.0.4/dist/aos.css"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Cabin:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class={bodyStyle}>
    <slot />
    <script
      src="https://code.jquery.com/jquery-3.7.1.js"
      integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4="
      crossorigin="anonymous"
      is:inline></script>
    <script
      src="https://b-js.ringba.com/CA8efeb5ed8623493e802a051b5beb905f"
      is:inline
      async></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
      is:inline></script>
    <script
      is:inline
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBxgvbMlSGFH3Uy-Vrekqg4ZxnZ2y6M5MU&callback=Function.prototype"
    ></script>
    <script src="/js/slick.min.js" is:inline></script>
    <script>
      var jq = $.noConflict();
      jq(document).ready(function () {
        if (jq(window).width() > 767) {
        } else {
          var stickyTop = jq("section.section.banner_bottom").offset().top;
          jq(window).on("scroll", function () {
            if (jq(window).scrollTop() >= stickyTop) {
              jq(".home header").addClass("sticky_top_mobile");
              jq("body.home").addClass("sticky_footer_mobile");
            } else {
              jq(".home header").removeClass("sticky_top_mobile");
              jq("body.home").removeClass("sticky_footer_mobile");
            }
          });
        }
      });
    </script>
    <script
      is:inline
      src="https://cdn.rawgit.com/michalsnik/aos/2.0.4/dist/aos.js"></script>
    <script>
      AOS.init({
        duration: 1000,
        once: true,
      });
    </script>

    <script>
      jQuery(document).ready(function () {
        jQuery("#testimonial_slid").slick({
          //centerMode: true,
          //centerPadding: '300px',
          slidesToShow: 2,
          arrows: true,
          dots: true,
          responsive: [
            {
              breakpoint: 991,
              settings: {
                arrows: true,
                slidesToShow: 1,
              },
            },
            {
              breakpoint: 768,
              settings: {
                arrows: true,
                dots: false,
                slidesToShow: 1,
              },
            },
          ],
        });
        jQuery(document).ready(function () {
          setTimeout(function () {
            jQuery(".testimonial_slid button.slick-prev.slick-arrow").appendTo(
              ".testi_arrows"
            );
          }, 100);
          setTimeout(function () {
            jQuery(".testimonial_slid button.slick-next.slick-arrow").appendTo(
              ".testi_arrows"
            );
          }, 100);
        });
        jQuery(window).resize(function () {
          setTimeout(function () {
            jQuery(".testimonial_slid button.slick-prev.slick-arrow").appendTo(
              ".testi_arrows"
            );
          }, 100);
          setTimeout(function () {
            jQuery(".testimonial_slid button.slick-next.slick-arrow").appendTo(
              ".testi_arrows"
            );
          }, 100);
        });

        jQuery(document).ready(function () {
          jQuery(".reviews_tab_main").click(function () {
            jQuery("#testimonial_slid").slick("refresh");
          });
        });
      });
    </script>
    <script>
      // Function to perform reverse geocoding
      const element = document.querySelectorAll(".geocodelocation");
      const elementarray = Array.from(element);
      function reverseGeocode(latitude, longitude) {
        const geocoder = new google.maps.Geocoder();
        const latlng = {
          lat: parseFloat(latitude),
          lng: parseFloat(longitude),
        };

        geocoder.geocode({ location: latlng }, (results, status) => {
          if (status === "OK") {
            if (results[0]) {
              // Extract state and city from the address components
              let state, city;
              for (const component of results[0].address_components) {
                if (component.types.includes("administrative_area_level_1")) {
                  state = component.short_name;
                }
                if (component.types.includes("locality")) {
                  city = component.long_name;
                }
              }
              elementarray.map((elem) => {
                elem.innerHTML = `${city}, ${state}`;
              });
            } else {
              console.error("No results found");
            }
          } else {
            console.error("Geocoder failed due to: " + status);
          }
        });
      }

      // Get the user's current location using the Geolocation API
      navigator.geolocation.watchPosition(
        (position) => {
          const latitude = position.coords.latitude;
          const longitude = position.coords.longitude;

          // Call the reverse geocoding function
          reverseGeocode(latitude, longitude);
        },
        (error) => {
          console.log(error);
        },
        {
          enableHighAccuracy: true,
          timeout: 2000,
          maximumAge: 10000,
        }
      );
    </script>
  </body>
</html>
